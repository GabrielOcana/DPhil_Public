{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a1adf9ee-5eb0-4ea9-84c2-da6d36bc9046",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Imaging_Data():\n",
    "    \"\"\"An analysis framework for analysing imaging data\"\"\"\n",
    "    \n",
    "    def __init__(self,data_path,paq_path):\n",
    "        \"\"\"Initialize data and time-locking file\"\"\"\n",
    "        \n",
    "        self.data_path = data_path\n",
    "        self.paq_path = paq_path\n",
    "        \n",
    "    def dF_Fmean(self):\n",
    "        \"\"\"Obtain dF_F values\"\"\"\n",
    "        \n",
    "        tmp = genfromtxt(self.data_path, delimiter=',')\n",
    "        self.dF_Fmean = (tmp[1:len(tmp)-1,2]-np.mean(tmp[1:len(tmp)-1,2]))/np.mean(tmp[1:len(tmp)-1,2])\n",
    "        return self.dF_Fmean\n",
    "    \n",
    "    def Paq(self):\n",
    "        \"\"\"Obtain Pack data and paq names\"\"\"\n",
    "        \n",
    "        tmp= paq_read_function(self.paq_path)\n",
    "        self.paq_data = tmp['data']\n",
    "        self.paq_names = tmp['channels_names']\n",
    "        self.paq_num_chan = tmp['num_channels']\n",
    "        \n",
    "    def Stim_times(self):\n",
    "        \"\"\"Obtain stimulation frame numbers\"\"\"\n",
    "        \n",
    "        #Find event times\n",
    "        thresh = 0.2\n",
    "        for y in range(self.paq_num_chan):\n",
    "            tmp=self.paq_data[y]\n",
    "            trig_times = np.zeros(len(tmp))  #Maybe tmp.T_?\n",
    "            tmp2 = 'self.trig_times_' + str(y)\n",
    "            for i in range(len(self.paq_data[0])):\n",
    "                if tmp[i]>thresh and tmp0[i-1]<thresh:\n",
    "                    trig_times.append(i)\n",
    "            globals()[tmp2] = trig_times\n",
    "                             \n",
    "        #Finds The frames where whisker is stimulated! (1)\n",
    "        for y in range(self.paq_num_chan):\n",
    "            if self.paq_names[y] != 'Frame_clock':\n",
    "                tmp = 'self.trig_times_' + str(y)\n",
    "                tmp2 = 'self' + self.paq_names[y] + '_frames_nums'\n",
    "                tmp3=[]\n",
    "                globals()[tmp2] = []\n",
    "                for ii in range(len(globals()[tmp])): #globals is saying that this string is a variable, i'm amazed that this actually works!\n",
    "                    tmp4 = trig_times_0[ii]\n",
    "                    tmp5 = min(trig_times_1, key=lambda x:abs(x-tmp4))\n",
    "                    tmp6 = trig_times_1.index(tmp5)\n",
    "                    tmp3.append(tmp6)\n",
    "                globals()[tmp2] = tmp3\n",
    "                \n",
    "    def Peri_stim_dF(self,chan_num,minus_fr,plus_fr,hz):\n",
    "        \"\"\"Obtain peri-whisker activity for the channel number, pre- and post- stim frames and imaging freq provide\"\"\"\n",
    "        \n",
    "        #import random\n",
    "        tmp = self.paq_names[chan_num] + '_frames_nums'\n",
    "        fws = np.array(globals()[tmp])\n",
    "        stim_resp = np.zeros([len(tmp),(minus_fr+minus_fr)*hz])\n",
    "        #cont_resp = np.zeros([10,2400])\n",
    "        for yy in range(len(fws)):\n",
    "            stim_resp[yy,:] = self.dF_Fmean[fws[yy]-(minus_fr*hz):fws[yy]+(pluts_fr*hz)]\n",
    "            #cont_resp[yy,:] = dF_Fmean[rnd[yy]-600:rnd[yy]+1800]\n",
    "       \n",
    "\n",
    "\n",
    "        \n",
    "        \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "analysis",
   "language": "python",
   "name": "analysis"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
